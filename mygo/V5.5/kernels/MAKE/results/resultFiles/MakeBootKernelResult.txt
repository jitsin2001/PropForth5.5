
 scriptFileName: MAKE/scripts/MakeBootKernel.txt
   logFileName: MAKE/results/runLogs/MakeBootKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeBootKernelResult.txt
outputFileName: 
hA state orC! c" hA state orC!" 5 cogx

here: 13636 

NFA (Forth/Asm Immediate eXecute) Name
03_656 F   build_BootKernel     

PropForth v5.5 2013Feb20 11:30 0



 scriptFileName: MAKE/scripts/LoadStartKernel.txt
   logFileName: MAKE/results/runLogs/MakeBootKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeBootKernelResult.txt
outputFileName: 
EEpromUtils Loading 1 2 3 4 5 6 7 8 9 10 11 12 EEpromUtils Loaded

Writing EEPROM:
1024 2048 3072 4096 5120 6144 7168 8192 
9216 10240 11264 12288 13312 14336 15360 16384 
17408 18432 19456 20480 21504 22528 23552 24576 
25600 26624 27648 28672 29696 30720 31744 32768 
EEPROM Sum: 736243306 
Prop0 Cog6 ok

 scriptFileName: MAKE/scripts/MakeBootKernel.txt
   logFileName: MAKE/results/runLogs/MakeBootKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeBootKernelResult.txt
outputFileName: 
here W@ . cr
13636 
Prop0 Cog6 ok
fl
: _xc
rot2 over =
if
drop -1 0
else
nip -1
then
;
Prop0 Cog5 ok
[ifndef $C_a_doconl
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a_dovarl
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>0
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm1>1
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>flagIMM
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>flag
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>1IMM
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>1
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef _bf
Prop0 Cog5 ok
: _bf
<# # # base W@ h10 < if # then #>
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef .byte
Prop0 Cog5 ok
: .byte
_bf .cstr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _wf
Prop0 Cog5 ok
: _wf
<# # # # # base W@ h10 < if # base W@ hA < if # then then #>
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef .word
Prop0 Cog5 ok
: .word
_wf .cstr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _lf
Prop0 Cog5 ok
: _lf
<# # # # # # # # # base W@ h10 < if # # base W@ hA < if # then then  #>
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef .long
Prop0 Cog5 ok
: .long
_lf .cstr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef lasti?
Prop0 Cog5 ok
: lasti?
1 RS@ h2 RS@ 1+ =
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
: xc1
h22 c" quote" _xc
if
h23 c" hash" _xc
if
h30 c" z" _xc
if
h31 c" one" _xc
if
h32 c" two" _xc
if
h33 c" three" _xc
if
h34 c" four" _xc
if
h35 c" five" _xc
if
h36 c" six" _xc
if
h38 c" eight" _xc
if
h28 c" lparen" _xc
if
h29 c" rparen" _xc
if
0
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xc2
h5B c" sbo" _xc
if
h5C c" bs" _xc
if
h5D c" sbc" _xc
if
h3A c" colon" _xc
if
h3B c" scolon" _xc
if
h27 c" tick" _xc
if
h40 c" at" _xc
if
h21 c" bang" _xc
if
h3D c" eq" _xc
if
h3E c" gt" _xc
if
0
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xc3
h3C c" lt" _xc
if
h2D c" minus" _xc
if
h2B c" plus" _xc
if
h2F c" slash" _xc
if
h2A c" star" _xc
if
h2E c" dot" _xc
if
h2C c" comma" _xc
if
h24 c" dlr" _xc
if
h7B c" cbo" _xc
if
h7D c" cbc" _xc
if
h3F c" q" _xc
if
0
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xlatnamechar
xc1
if
-1
else
xc2
if
-1
else
xc3
then
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: ixnfa
0 max wlastnfa W@
begin
over 0=
if
-1
else
swap 1- swap nfa>next dup 0=
then
until
nip
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: .xstr
dup 0<>
if
bounds
do
i C@ xlatnamechar
if
.cstr
else
emit
then
loop
else
2drop
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: .xstrname
dup 0<>
if
namelen .xstr
else
drop ." ??? "
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xstrlen
dup 0<>
if
bounds 0 rot2
do
i C@ xlatnamechar
if
C@
else
drop 1
then
+
loop
nip
else
2drop 0
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xstrnamelen
dup namelen dup 0<>
if
xstrlen
else
nip
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: nfacount
0 wlastnfa W@
begin
swap 1+ swap nfa>next dup 0=
until
drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: nfaix
-1 swap 0 wlastnfa W@
begin
rot 2dup =
if
2drop swap -1 -1 -1
else
rot 1+ rot nfa>next dup 0=
then
until
3drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: lastdef
c" wlastnfa" over name=
over c" here" name= or
over c" dictend" name= or
over c" memend" name= or

if
drop 0
else
dup find
if
pfa>nfa =
else
2drop -1
then
then
; 
Prop0 Cog5 ok

Prop0 Cog5 ok
wvariable lastSpinNFA
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinname
-1 swap h22 emit namelen 0 
do
C@++ dup h22 =
if
drop h22 emit ." ,$22" nip 0 swap
else
emit
then
loop
drop
if
h22 emit
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordheader
cr h18 spaces ." word    "  
lastSpinNFA W@ dup 0=
if
." 0" drop
else
." @" .xstrname ." NFA + $10"
then 
cr
ixnfa dup lastSpinNFA W! dup .xstrname ." NFA" 
dup xstrnamelen namemax and h15 swap - 1 max
dup spaces ." byte    $" over C@ .byte ." ," over spinname
cr 
over .xstrname ." PFA" spaces ." word    "
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordasm
." (@a_" .xstrname ."  - @a_base)/4"
cr
;  
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordconstant
dup nfa>pfa W@ $C_a_doconw =
if
dup c" $H_" npfx
if
." (@a_doconw - @a_base)/4" cr h18 spaces ." word    " 
dup ." @" namelen h3 - swap h3 + swap .xstr ." PFA  + $10"
cr
0
else
dup c" $C_" npfx
if
." (@a_doconw - @a_base)/4" cr h18 spaces ." word    " 
dup ." (@" namelen h3 - swap h3 + swap .xstr ."  - @a_base)/4"
cr
0
else
dup c" $S_" npfx
if
." (@a_doconw - @a_base)/4" cr h18 spaces ." word    " 
dup ." dlrS_" namelen h3 - swap h3 + swap .xstr
cr
0
else
-1
then
then
then
else
-1
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: isExecasm
dup $C_a__xasm2>1 =
over $C_a__xasm2>flag = or
over $C_a__xasm1>1 = or
swap $C_a__xasm2>0 = or
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: isExecasmIMM
dup $C_a__xasm2>1IMM =
swap $C_a__xasm2>flagIMM = or
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spindcmp1
h18 spaces ." word    $"  2+ dup W@ .word
cr
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spindcmp2
h18 spaces ." long    $" 2+ alignl
dup dup 2+ W@ .word W@ .word 2+
cr
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spindcmp
dup W@ dup $C_a_doconw = swap $C_a_dovarw = or
if
spindcmp1 -1
else

dup W@ isExecasmIMM
if
spindcmp1
spindcmp1 0
else

dup W@ dup isExecasm
swap $C_a_litw = or
if
spindcmp1 0
else

dup W@ dup $C_a_branch =
over $C_a_(loop) = or
over $C_a_(+loop) = or
swap $C_a_0branch = or
if
spindcmp1 0
else

dup W@ dup $C_a_doconl =
swap $C_a_dovarl = or
if
spindcmp2 -1
else

dup W@ $C_a_litl =
if
spindcmp2 0
else

dup W@ dup $H_dq = swap $H_cq = or
if
h18 spaces ." byte    $" 2+
C@++ dup .byte ." ," 2dup
h22 emit .str h22 emit
+ alignw 2-
cr 0
else

dup W@ $C_a_lxasm =
if
2+
alignl
dup L@ h9 rshift h1FF and 4*
2dup bounds
do
h18 spaces ." long    $"
i L@ .long cr 
h4 +loop
+ 2- -1
else
dup W@ $C_a_exit =
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordforth
nfa>pfa 2-
begin
2+ dup W@ dup pfa>nfa
swap $C_fMask COG@ and
if
." @" .xstrname ." PFA + $10"
cr
else
spinwordasm
then
spindcmp dup 0=
if
h18 spaces ." word    "
then
until
2+
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _sw
0 
do
i h7 and 0=
if
i 0<>
if
cr
then
h18 spaces ." WORD    0"
else
." ,0"
then
loop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinword
dup spinwordheader dup C@ h80 and
if
spinwordconstant
if
spinwordforth over 1- ixnfa 2- swap - dup 0<>
if
alignw 2/ dup h8 >
if
alignw 2/
then
_sw
else
drop
then
else
drop
then
else
spinwordasm
then
drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: cr18
cr h18 spaces
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinmaker
hex
nfacount 1- dup
c" _xc" find
if
cr
." ForthDictStart"
cr
cr18 ." word    0"
cr
." wlastnfaNFA             byte    $88," h22 emit ." wlastnfa" h22 emit
cr
." wlastnfaPFA             word    (@a_dovarw - @a_base)/4"
cr
."                         word    @H_lastlfa + $12"
cr
cr18 ." word    @wlastnfaNFA + $10"
cr
." hereNFA                 byte    $84," h22 emit ." here" h22 emit
cr
." herePFA                 word    (@a_dovarw - @a_base)/4"
cr
."                         word    @wfreespacestart + $10"
cr 
cr18 ." word    @hereNFA + $10"
cr
." dictendNFA              byte    $87," h22 emit ." dictend" h22 emit
cr
." dictendPFA              word    (@a_dovarw - @a_base)/4"
cr
."                         word    @ForthMemoryEnd + $10"
cr
cr18 ." word    @dictendNFA + $10"
cr
." memendNFA               byte    $86," h22 emit ." memend" h22 emit
cr
." memendPFA               word    (@a_dovarw - @a_base)/4"
cr
."                         word    @ForthMemoryEnd + $10"
cr 


pfa>nfa nfaix - 0

c" memend" lastSpinNFA W!
do
dup i - dup ixnfa
lastdef
if
lasti?
if
." H_lastlfa"
cr
then
spinword
else
drop
then
loop
drop
cr
." wfreespacestart"
cr
d_5000 + d_16 u/mod 0 
do
cr18 ." long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0"
loop
dup 0<>
if
1-
cr18 ." long    0"
dup 0<>
if
0
do
." ,0"
loop
else
drop
then
else
drop
then
cr
." ForthMemoryEnd"
cr
cr
else
3drop
then
;
Prop0 Cog5 ok

Prop0 Cog6 ok
fl
$C_a_dovarl wconstant $C_a_dovarl
Prop0 Cog5 ok
$C_a_doconl wconstant $C_a_doconl
Prop0 Cog5 ok
$C_a_debugonoff wconstant $C_a_debugonoff
Prop0 Cog5 ok
$C_a_reset wconstant $C_a_reset
Prop0 Cog5 ok
$C_a__xasm2>1  wconstant $C_a__xasm2>1
Prop0 Cog5 ok
$C_a__xasm2>1IMM wconstant $C_a__xasm2>1IMM
Prop0 Cog5 ok
$C_a__xasm2>flag wconstant $C_a__xasm2>flag
Prop0 Cog5 ok
$C_a__xasm2>flagIMM wconstant $C_a__xasm2>flagIMM
Prop0 Cog5 ok
$C_a__xasm1>1  wconstant $C_a__xasm1>1
Prop0 Cog5 ok
$C_a__xasm2>0  wconstant $C_a__xasm2>0
Prop0 Cog5 ok
$C_a_stpush  wconstant $C_a_stpush
Prop0 Cog5 ok
$C_a_stpush_ret  wconstant $C_a_stpush_ret
Prop0 Cog5 ok
$C_a_rspush  wconstant $C_a_rspush
Prop0 Cog5 ok
$C_a_rspush_ret  wconstant $C_a_rspush_ret
Prop0 Cog5 ok
$C_a_stpop  wconstant $C_a_stpop
Prop0 Cog5 ok
$C_a_stpoptreg  wconstant $C_a_stpoptreg
Prop0 Cog5 ok
$C_a_stpop_ret  wconstant $C_a_stpop_ret
Prop0 Cog5 ok
$C_a_stpoptreg_ret wconstant $C_a_stpoptreg_ret
Prop0 Cog5 ok
$C_a_rspop  wconstant $C_a_rspop
Prop0 Cog5 ok
$C_a_rspop_ret  wconstant $C_a_rspop_ret
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
$C_fDestInc wconstant $C_fDestInc
Prop0 Cog5 ok
$C_fCondMask wconstant $C_fCondMask
Prop0 Cog5 ok
$C_fAddrMask wconstant $C_fAddrMask
Prop0 Cog5 ok
$C_fLongMask wconstant $C_fLongMask
Prop0 Cog5 ok
$C_stPtr wconstant $C_stPtr
Prop0 Cog5 ok
$C_rsPtr wconstant $C_rsPtr
Prop0 Cog5 ok
$C_stTOS wconstant $C_stTOS
Prop0 Cog5 ok
$C_treg1 wconstant $C_treg1
Prop0 Cog5 ok
$C_treg2 wconstant $C_treg2
Prop0 Cog5 ok
$C_treg3 wconstant $C_treg3
Prop0 Cog5 ok
$C_treg4 wconstant $C_treg4
Prop0 Cog5 ok
$C_treg5 wconstant $C_treg5
Prop0 Cog5 ok
$C_treg6 wconstant $C_treg6
Prop0 Cog5 ok
$C_stBot wconstant $C_stBot
Prop0 Cog5 ok
$C_stTop wconstant $C_stTop
Prop0 Cog5 ok
$C_rsBot wconstant $C_rsBot
Prop0 Cog5 ok
$C_rsTop wconstant $C_rsTop
Prop0 Cog5 ok

Prop0 Cog5 ok
h04 wconstant $V_pad
Prop0 Cog5 ok
h83 wconstant $V_lc
Prop0 Cog5 ok
h84 wconstant $V_t0
Prop0 Cog5 ok
h86 wconstant $V_t1
Prop0 Cog5 ok
h88 wconstant $V_tbuf
Prop0 Cog5 ok
hA8 wconstant $V_numpad
Prop0 Cog5 ok
hCA wconstant $V_numchan
Prop0 Cog5 ok
hCB wconstant $V_debugcmd
Prop0 Cog5 ok
hCC wconstant $V_debugValue
Prop0 Cog5 ok
hD0 wconstant $V_cds
Prop0 Cog5 ok
hD2 wconstant $V_base
Prop0 Cog5 ok
hD4 wconstant $V_execword
Prop0 Cog5 ok
hD8 wconstant $V_coghere
Prop0 Cog5 ok
hDA wconstant $V_>out
Prop0 Cog5 ok
hDC wconstant $V_>in
Prop0 Cog5 ok
hDE wconstant $V_lasterr
Prop0 Cog5 ok
hDF wconstant $V_state
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog6 ok
hA state orC!

 scriptFileName: MAKE/scripts/MakeBootKernel.txt
   logFileName: MAKE/results/runLogs/MakeBootKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeBootKernelResult.txt
outputFileName: MAKE/results/outputFiles/BootKernel.spin

 scriptFileName: MAKE/scripts/MakeBootKernel.txt
   logFileName: MAKE/results/runLogs/MakeBootKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeBootKernelResult.txt
outputFileName: 
