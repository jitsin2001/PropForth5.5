
 scriptFileName: MAKE/scripts/MakeFsrdKernel.txt
   logFileName: MAKE/results/runLogs/MakeFsrdKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeFsrdResult.txt
outputFileName: 
hA state orC! c" hA state orC!" 5 cogx

here: 13238 

NFA (Forth/Asm Immediate eXecute) Name
10_510 F   build_BootOpt        02_690 F   build_BootKernel     

PropForth v5.5 2013Feb20 11:30 0



 scriptFileName: MAKE/scripts/LoadBootOptimizeKernel.txt
   logFileName: MAKE/results/runLogs/MakeFsrdKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeFsrdResult.txt
outputFileName: 
EEpromUtils Loading 1 2 3 4 5 6 7 8 9 10 11 12 EEpromUtils Loaded

Writing EEPROM:
1024 2048 3072 4096 5120 6144 7168 8192 
9216 10240 11264 12288 13312 14336 15360 16384 
17408 18432 19456 20480 21504 22528 23552 24576 
25600 26624 27648 28672 29696 30720 31744 32768 
EEPROM Sum: -395973378 
Prop0 Cog6 ok

 scriptFileName: MAKE/scripts/MakeFsrdKernel.txt
   logFileName: MAKE/results/runLogs/MakeFsrdKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeFsrdResult.txt
outputFileName: 
here W@ . cr
13238 
Prop0 Cog6 ok
fl
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
1 wconstant build_fsrd
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a_doconl
Prop0 Cog5 ok
h52 wconstant $C_a_doconl
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef constant
Prop0 Cog5 ok
: constant
lockdict create $C_a_doconl w, l, forthentry freedict
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
h8000 constant fsbot  \ the start adress in eeprom for the file system
Prop0 Cog5 ok
h10000 constant fstop  \ the end address in the eeprom for the file system
Prop0 Cog5 ok
h40 wconstant fsps  \ a page size which should work with 32kx8 & 64kx8 eeproms
Prop0 Cog5 ok
\ and should work with larger as well. MUST BE A POWER OF 2
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef lasti?
Prop0 Cog5 ok
: lasti?
1 RS@ h2 RS@ 1+ =
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef #C
Prop0 Cog5 ok
: #C
-1 >out W+! pad>out C!

;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef _nd
Prop0 Cog5 ok
: _nd
base W@ d_40 over <
if
d_6
else
d_15 over <
if
d_8
else
d_9 over <
if
d_10
else
d_7 over <
if
d_11
else
d_6 over <
if
d_12
else
d_3 over <
if
d_16
else
d_32
thens
nip
swap u/mod swap 0<>
if
1+
then
;
Prop0 Cog5 ok
] 
Prop0 Cog5 ok
[ifndef _ft
Prop0 Cog5 ok
: _ft
h4 base W@ h_8 h_A between
if
1-
then
rot2
<#
_nd 0
do
#
over i 1+ swap u/mod drop
0=
if
lasti? 0=
if
h_5F #C
then
then
loop
#>
nip
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _bf
Prop0 Cog5 ok
: _bf
4 _ft
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef .byte
Prop0 Cog5 ok
: .byte
h_FF and _bf .cstr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _wf
Prop0 Cog5 ok
: _wf
h_FFFF and 2 _ft
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef .word
Prop0 Cog5 ok
: .word
_wf .cstr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _lf
Prop0 Cog5 ok
: _lf
1 _ft
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef .long
Prop0 Cog5 ok
: .long
_lf .cstr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef 1lock
Prop0 Cog5 ok
: 1lock 1 lock ;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef 1unlock
Prop0 Cog5 ok
: 1unlock 1 unlock ;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef ibound
Prop0 Cog5 ok
: ibound
1 RS@
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef invert
Prop0 Cog5 ok
: invert
-1 xor
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef pinin
Prop0 Cog5 ok
: pinin
>m invert dira COG@ and dira COG!
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef pinout
Prop0 Cog5 ok
: pinout
>m dira COG@ or dira COG!
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef pinlo
Prop0 Cog5 ok
: pinlo
>m _maskoutlo
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef pinhi
Prop0 Cog5 ok
: pinhi
>m _maskouthi
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef px
Prop0 Cog5 ok
: px
swap
if 
pinhi
else
pinlo
then
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sdai
Prop0 Cog5 ok
: _sdai
h1D pinin
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sdao
Prop0 Cog5 ok
: _sdao
h1D pinout
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _scli
Prop0 Cog5 ok
: _scli
h1C pinin
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sclo
Prop0 Cog5 ok
: _sclo
h1C pinout
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sdal
Prop0 Cog5 ok
: _sdal
h20000000 _maskoutlo
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sdah
Prop0 Cog5 ok
: _sdah
h20000000 _maskouthi
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _scll
Prop0 Cog5 ok
: _scll
h10000000 _maskoutlo
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sclh
Prop0 Cog5 ok
: _sclh
h10000000 _maskouthi
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _sda?
Prop0 Cog5 ok
: _sda?
h20000000 _maskin
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef _eestart
Prop0 Cog5 ok
: _eestart
_sclh _sclo _sdah _sdao _sdal _scll
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok
[ifndef _eestop
Prop0 Cog5 ok
: _eestop
_sclh _sdah _scll _scli _sdai
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef eereadpage 
Prop0 Cog5 ok
: eereadpage
1lock
1 max rot dup hFF and swap dup h8 rshift hFF and swap h10 rshift h7 and 1 lshift dup >r
_eestart hA0 or _eewrite swap _eewrite or swap _eewrite or
_eestart r> hA1 or _eewrite or
rot2 bounds
do
lasti? _eeread i C!
loop
_eestop
1unlock
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef _fsk
Prop0 Cog5 ok
: _fsk
h8 lshift key or
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef _fnf
Prop0 Cog5 ok
: _fnf
cr ." FILE NOT FOUND" cr
;
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fspa
fsps 1- + fsps 1- andn
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsnext
t0 W@ t1 C@ + 2+ 1+ + _fspa dup fstop >=
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsrd
dup >r rot dup r> + fstop 1- >
if
hB ERR
then
rot2 eereadpage
if
hA ERR
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsfree
-1 fsbot
begin
dup t0 3 _fsrd t0 W@ hFFFF =
if
nip dup -1
else
_fsnext
then
until
drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsfind
fsbot 0 >r
begin
dup t0 h22 _fsrd t0 W@ hFFFF =
if
-1
else
over t1 cstr=
if
r> drop dup >r
then
_fsnext
then
until
2drop r>
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fslast
0 fsbot
begin
dup t0 h22 _fsrd t0 W@ hFFFF =
if 
-1
else
nip dup
_fsnext
then
until
drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
: fsfree
_fsfree dup -1 =
if
0
else
fstop swap -
then
cr .long ."  bytes free in EEPROM file system" cr
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: fsls
cr fsbot
begin
dup t0 h22 _fsrd t0 W@ hFFFF =
if
-1
else
dup .long space t0 W@ .word space t1 .cstr cr
_fsnext
then
until
drop fsfree
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsread
_fsfind dup
if
dup t0 h3 _fsrd
t1 C@ + 2+ 1+ t0 W@ bounds
do
fsps i fsps 1- and -
ibound i - min
i pad h2 ST@ _fsrd
pad over .str
+loop
else
drop
then
padbl
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsp
parsenw dup
if
dup _fsfind 0=
if
drop 0
then
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
: fsread
_fsp dup 
if
_fsread
else
drop _fnf
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _fsload
dup _fsfind
if
lockdict cogid nfcog iolink freedict
_fsread cr cr cogid iounlink
else
drop
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: fsload 
_fsp dup
if
_fsload
else
drop _fnf
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
c" onboot" find drop pfa>nfa 1+ c" onb001" C@++ rot swap cmove
Prop0 Cog5 ok

Prop0 Cog5 ok
: onboot
onb001
fkey? and fkey? and or h1B <>
if
c" boot.f" _fsload
then
;
Prop0 Cog5 ok

Prop0 Cog6 ok
fl 
Prop0 Cog5 ok
$C_a_lxasm w, h1B8  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
Prop0 Cog5 ok
z8Fryj l, z2WytCj l, z2WytLG l, z2WytTP l, z2Wyt\k l, z2Wyth6 l, z2Wytp] l, z1bixaB l,
Prop0 Cog5 ok
z1bixqB l, z1Sit7H l, z1YFsNl l, z1SL04S l, z2Wyub9 l, z2Wiuq8 l, z20iuqk l, z20iuq9 l,
Prop0 Cog5 ok
z1Sit7H l, z2WisiU l, z24isik l, z31Vsb0 l, z1SJ04Z l, z1XFsNl l, zjyuW1 l, z3[yufY l,
Prop0 Cog5 ok
z1SJ04S l, zbyuWN l, z1WyuZy l, z2WirqS l, z1SV04S l, z1SitFI l, z26Fw7e l, z1SQ04j l,
Prop0 Cog5 ok
z1bywY0 l, z1Gi]qf l, z2Wiuy5 l, z1Wiuyf l, zbiuyg l, z1SitFI l, z\yrb8 l, z38ywW0 l,
Prop0 Cog5 ok
z1WywXy l, z20ywb8 l, z20ywO1 l, z1WywVy l, z1SitFI l, z1byuv0 l, zfyur2 l, z1byur1 l,
Prop0 Cog5 ok
z2Wyv0B l, z1SitFI l, z2WivFk l, zcyur1 l, z1jixaB l, z20ivF9 l, z1SitFI l, z2WisiX l,
Prop0 Cog5 ok
z24isik l, z31Vsb0 l, z1SJ059 l, z3[yv56 l, z1SV04j l, z1SitNG l, z1SitNJ l, z1SitNG l,
Prop0 Cog5 ok
z1SitNK l, z1SitNG l, z1SitNL l, z1SitNG l, z1SitNM l, z1SV05G l, z1SitVI l, z1YVrn0 l,
Prop0 Cog5 ok
z1SL05P l, z2WityY l, z20ytr1 l, z1Wytyy l, z26Fty\ l, z1SQ05P l, z1SitVI l, z1Kig7Z l,
Prop0 Cog5 ok
z1KigFZ l, z2Wisi6 l, z2Wyrn0 l, zfisi[ l, z1Wisi2 l, z1[ivV2 l, z1bivVD l, z1SitVI l,
Prop0 Cog5 ok
z\yrG8 l, z38yvO0 l, z1WyvPy l, z20yvW8 l, z2WivNN l, z1SV05P l, z1SitaI l, z26FvN\ l,
Prop0 Cog5 ok
z1SQ05k l, z26VsW0 l, z4\syC l, z1YLsv0 l, z1SQ05k l, z1SitaI l, z1GiiV] l, z2Wisy3 l,
Prop0 Cog5 ok
z1Wisy] l, zbisya l, z4FsyC l, z1SitaI l, z\yrO8 l, z38yvj0 l, z1Wyvky l, z20yvr8 l,
Prop0 Cog5 ok
z20yvb1 l, z1Wyviy l, z1SV05k l, z1SitiI l, z4iuFj l, z1YVuC0 l, z1SL066 l, z1SitiI l,
Prop0 Cog5 ok
z2Wiu7b l, z20yu01 l, z1Wyu7y l, z26Fu7e l, z1SQ066 l, z1SitiI l, z1bywA0 l, z1Kilyc l,
Prop0 Cog5 ok
z1Kim7c l, z2WisiP l, zfisid l, z1Wisi4 l, z1[iwF4 l, z1biwFD l, z1SitiI l, z\yrW8 l,
Prop0 Cog5 ok
z38yw80 l, z1Wyw9y l, z20ywG8 l, z2Wiw7O l, z1SitiI l, z26Vu8D l, z1YQuO1 l, z45ryj l,
Prop0 Cog5 ok
z2WtsbA l, z4Asij l, z1SV066 l, z1SitqI l, z2WiuNj l, z20yuG2 l, z4isaQ l, z1SitqI l,
Prop0 Cog5 ok
z20yuJ2 l, zAisyQ l, z1SQ06n l, z8FwqQ l, z18ysrG l, z1[ixaB l, z20isyk l, z3rysr0 l,
Prop0 Cog5 ok
z1bixaB l, z1SitqI l, z20yuG4 l, z8iuVQ l, z1SV06] l,
Prop0 Cog5 ok
freedict
Prop0 Cog5 ok
: serial
4*
clkfreq swap u/ dup 2/ 2/
hFF h1C2 
2dup COG!
1+ 2dup COG!
1+ 2dup COG!
1+ tuck COG!
1+ h100 swap 2dup COG!
1+ tuck COG!
1+ tuck COG!
1+ tuck COG!
1+ swap >m over COG!
1+ swap >m over COG!
1+ h1F0 swap
do
0 i COG!
loop
c" SERIAL" numpad ccopy numpad cds W!
4 state andnC!
0 io hC4 + L!
0 io hC8 + L!
_serial
;
Prop0 Cog5 ok

Prop0 Cog6 ok
fl
rot2 over =
if
drop -1 0
else
nip -1
then
;
Prop0 Cog5 ok
[ifndef $C_a_doconl
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a_dovarl
Prop0 Cog5 ok
h4D wconstant $C_a_dovarl
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>0
Prop0 Cog5 ok
h21 wconstant $C_a__xasm2>0
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm1>1
Prop0 Cog5 ok
h1C wconstant $C_a__xasm1>1
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>flagIMM
Prop0 Cog5 ok
h1 wconstant $C_a__xasm2>flagIMM
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>flag
Prop0 Cog5 ok
h4 wconstant $C_a__xasm2>flag
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>1IMM
Prop0 Cog5 ok
h13 wconstant $C_a__xasm2>1IMM
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef $C_a__xasm2>1
Prop0 Cog5 ok
h16 wconstant $C_a__xasm2>1
Prop0 Cog5 ok
]
Prop0 Cog5 ok

Prop0 Cog5 ok
[ifndef _bf
.
.
.
.
]
Prop0 Cog5 ok
[ifndef .byte
.
.
.
.
]
Prop0 Cog5 ok
[ifndef _wf
.
.
.
.
]
Prop0 Cog5 ok
[ifndef .word
.
.
.
.
]
Prop0 Cog5 ok
[ifndef _lf
.
.
.
.
]
Prop0 Cog5 ok
[ifndef .long
.
.
.
.
]
Prop0 Cog5 ok
[ifndef lasti?
.
.
.
.
]
Prop0 Cog5 ok

Prop0 Cog5 ok
: xc1
h22 c" quote" _xc
if
h23 c" hash" _xc
if
h30 c" z" _xc
if
h31 c" one" _xc
if
h32 c" two" _xc
if
h33 c" three" _xc
if
h34 c" four" _xc
if
h35 c" five" _xc
if
h36 c" six" _xc
if
h38 c" eight" _xc
if
h28 c" lparen" _xc
if
h29 c" rparen" _xc
if
0
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xc2
h5B c" sbo" _xc
if
h5C c" bs" _xc
if
h5D c" sbc" _xc
if
h3A c" colon" _xc
if
h3B c" scolon" _xc
if
h27 c" tick" _xc
if
h40 c" at" _xc
if
h21 c" bang" _xc
if
h3D c" eq" _xc
if
h3E c" gt" _xc
if
0
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xc3
h3C c" lt" _xc
if
h2D c" minus" _xc
if
h2B c" plus" _xc
if
h2F c" slash" _xc
if
h2A c" star" _xc
if
h2E c" dot" _xc
if
h2C c" comma" _xc
if
h24 c" dlr" _xc
if
h7B c" cbo" _xc
if
h7D c" cbc" _xc
if
h3F c" q" _xc
if
0
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xlatnamechar
xc1
if
-1
else
xc2
if
-1
else
xc3
then
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: ixnfa
0 max wlastnfa W@
begin
over 0=
if
-1
else
swap 1- swap nfa>next dup 0=
then
until
nip
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: .xstr
dup 0<>
if
bounds
do
i C@ xlatnamechar
if
.cstr
else
emit
then
loop
else
2drop
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: .xstrname
dup 0<>
if
namelen .xstr
else
drop ." ??? "
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xstrlen
dup 0<>
if
bounds 0 rot2
do
i C@ xlatnamechar
if
C@
else
drop 1
then
+
loop
nip
else
2drop 0
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: xstrnamelen
dup namelen dup 0<>
if
xstrlen
else
nip
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: nfacount
0 wlastnfa W@
begin
swap 1+ swap nfa>next dup 0=
until
drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: nfaix
-1 swap 0 wlastnfa W@
begin
rot 2dup =
if
2drop swap -1 -1 -1
else
rot 1+ rot nfa>next dup 0=
then
until
3drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: lastdef
c" wlastnfa" over name=
over c" here" name= or
over c" dictend" name= or
over c" memend" name= or

if
drop 0
else
dup find
if
pfa>nfa =
else
2drop -1
then
then
; 
Prop0 Cog5 ok

Prop0 Cog5 ok
wvariable lastSpinNFA
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinname
-1 swap h22 emit namelen 0 
do
C@++ dup h22 =
if
drop h22 emit ." ,$22" nip 0 swap
else
emit
then
loop
drop
if
h22 emit
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordheader
cr h18 spaces ." word    "  
lastSpinNFA W@ dup 0=
if
." 0" drop
else
." @" .xstrname ." NFA + $10"
then 
cr
ixnfa dup lastSpinNFA W! dup .xstrname ." NFA" 
dup xstrnamelen namemax and h15 swap - 1 max
dup spaces ." byte    $" over C@ .byte ." ," over spinname
cr 
over .xstrname ." PFA" spaces ." word    "
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordasm
." (@a_" .xstrname ."  - @a_base)/4"
cr
;  
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordconstant
dup nfa>pfa W@ $C_a_doconw =
if
dup c" $H_" npfx
if
." (@a_doconw - @a_base)/4" cr h18 spaces ." word    " 
dup ." @" namelen h3 - swap h3 + swap .xstr ." PFA  + $10"
cr
0
else
dup c" $C_" npfx
if
." (@a_doconw - @a_base)/4" cr h18 spaces ." word    " 
dup ." (@" namelen h3 - swap h3 + swap .xstr ."  - @a_base)/4"
cr
0
else
dup c" $S_" npfx
if
." (@a_doconw - @a_base)/4" cr h18 spaces ." word    " 
dup ." dlrS_" namelen h3 - swap h3 + swap .xstr
cr
0
else
-1
then
then
then
else
-1
then
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: isExecasm
dup $C_a__xasm2>1 =
over $C_a__xasm2>flag = or
over $C_a__xasm1>1 = or
swap $C_a__xasm2>0 = or
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: isExecasmIMM
dup $C_a__xasm2>1IMM =
swap $C_a__xasm2>flagIMM = or
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spindcmp1
h18 spaces ." word    $"  2+ dup W@ .word
cr
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spindcmp2
h18 spaces ." long    $" 2+ alignl
dup dup 2+ W@ .word W@ .word 2+
cr
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spindcmp
dup W@ dup $C_a_doconw = swap $C_a_dovarw = or
if
spindcmp1 -1
else

dup W@ isExecasmIMM
if
spindcmp1
spindcmp1 0
else

dup W@ dup isExecasm
swap $C_a_litw = or
if
spindcmp1 0
else

dup W@ dup $C_a_branch =
over $C_a_(loop) = or
over $C_a_(+loop) = or
swap $C_a_0branch = or
if
spindcmp1 0
else

dup W@ dup $C_a_doconl =
swap $C_a_dovarl = or
if
spindcmp2 -1
else

dup W@ $C_a_litl =
if
spindcmp2 0
else

dup W@ dup $H_dq = swap $H_cq = or
if
h18 spaces ." byte    $" 2+
C@++ dup .byte ." ," 2dup
h22 emit .str h22 emit
+ alignw 2-
cr 0
else

dup W@ $C_a_lxasm =
if
2+
alignl
dup L@ h9 rshift h1FF and 4*
2dup bounds
do
h18 spaces ." long    $"
i L@ .long cr 
h4 +loop
+ 2- -1
else
dup W@ $C_a_exit =
thens
;
Prop0 Cog5 ok

Prop0 Cog5 ok

Prop0 Cog5 ok
: spinwordforth
nfa>pfa 2-
begin
2+ dup W@ dup pfa>nfa
swap $C_fMask COG@ and
if
." @" .xstrname ." PFA + $10"
cr
else
spinwordasm
then
spindcmp dup 0=
if
h18 spaces ." word    "
then
until
2+
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: _sw
0 
do
i h7 and 0=
if
i 0<>
if
cr
then
h18 spaces ." WORD    0"
else
." ,0"
then
loop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinword
dup spinwordheader dup C@ h80 and
if
spinwordconstant
if
spinwordforth over 1- ixnfa 2- swap - dup 0<>
if
alignw 2/ dup h8 >
if
alignw 2/
then
_sw
else
drop
then
else
drop
then
else
spinwordasm
then
drop
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: cr18
cr h18 spaces
;
Prop0 Cog5 ok

Prop0 Cog5 ok
: spinmaker
hex
nfacount 1- dup
c" _xc" find
if
cr
." ForthDictStart"
cr
cr18 ." word    0"
cr
." wlastnfaNFA             byte    $88," h22 emit ." wlastnfa" h22 emit
cr
." wlastnfaPFA             word    (@a_dovarw - @a_base)/4"
cr
."                         word    @H_lastlfa + $12"
cr
cr18 ." word    @wlastnfaNFA + $10"
cr
." hereNFA                 byte    $84," h22 emit ." here" h22 emit
cr
." herePFA                 word    (@a_dovarw - @a_base)/4"
cr
."                         word    @wfreespacestart + $10"
cr 
cr18 ." word    @hereNFA + $10"
cr
." dictendNFA              byte    $87," h22 emit ." dictend" h22 emit
cr
." dictendPFA              word    (@a_dovarw - @a_base)/4"
cr
."                         word    @ForthMemoryEnd + $10"
cr
cr18 ." word    @dictendNFA + $10"
cr
." memendNFA               byte    $86," h22 emit ." memend" h22 emit
cr
." memendPFA               word    (@a_dovarw - @a_base)/4"
cr
."                         word    @ForthMemoryEnd + $10"
cr 


pfa>nfa nfaix - 0

c" memend" lastSpinNFA W!
do
dup i - dup ixnfa
lastdef
if
lasti?
if
." H_lastlfa"
cr
then
spinword
else
drop
then
loop
drop
cr
." wfreespacestart"
cr
d_5000 + d_16 u/mod 0 
do
cr18 ." long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0"
loop
dup 0<>
if
1-
cr18 ." long    0"
dup 0<>
if
0
do
." ,0"
loop
else
drop
then
else
drop
then
cr
." ForthMemoryEnd"
cr
cr
else
3drop
then
;
Prop0 Cog5 ok

Prop0 Cog6 ok
hA state orC!

 scriptFileName: MAKE/scripts/MakeFsrdKernel.txt
   logFileName: MAKE/results/runLogs/MakeFsrdKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeFsrdResult.txt
outputFileName: MAKE/results/outputFiles/FsrdKernel.spin

 scriptFileName: MAKE/scripts/MakeFsrdKernel.txt
   logFileName: MAKE/results/runLogs/MakeFsrdKernelRunLog.txt
resultFileName: MAKE/results/resultFiles/MakeFsrdResult.txt
outputFileName: 
