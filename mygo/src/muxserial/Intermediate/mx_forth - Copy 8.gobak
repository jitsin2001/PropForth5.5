package muxserial

/*
fl
\
\ structure in cog memory for the prtotcol driver
\
h1C2
   dup wconstant __serin		\ h1C2
1+ dup wconstant __serout		\ h1C3
1+ dup wconstant __h100			\ h1C4
1+ dup wconstant __buf_offset		\ h1C5
1+ dup wconstant __bshift		\ h1C6
1+ dup wconstant __bmask		\ h1C7
1+ dup wconstant __iobuf		\ h1C8


1+ dup wconstant __reg1		\ h1C4
1+ dup wconstant __reg2		\ h1C4
1+ dup wconstant __reg3		\ h1C4
1+ dup wconstant __reg4		\ h1C4
1+ dup wconstant __reg5		\ h1C4
1+ dup wconstant __reg6		\ h1C4


drop

hA state orC! cr



\ a_serfkey?( -- char t/f)
build_BootOpt :rasm
		spush
		jmpret	__serfkeyq_ret , # __serfkeyq
		spush
		muxz	$C_stTOS , $C_fLongMask
		jexit

\
\ enter - $C_stTOS - don't care
\ exit  - $C_stTOS - char
\       - zflag    - set if the char is valid
\
\
__serfkeyq
		rdword	$C_stTOS , __serin
		test	$C_stTOS , # h100	wz
	if_z	wrword	__h100 , __serin
__serfkeyq_ret
		ret
;asm a_serfkey?

\ a_serkeyc( -- char)
build_BootOpt :rasm
		spush
		jmpret	__serkey_ret , # __serkey
		jexit
\
\ - enter - $C_stTOS - don't care
\ - exit  - $C_stTOS - char
\
__serkey
		jmpret	__serfkeyq_ret , # __serfkeyq
	if_nz	jmp	# __serkey
__serkey_ret
		ret
\
\ enter - $C_stTOS - don't care
\ exit  - $C_stTOS - char
\       - zflag    - set if the char is valid
\
\
__serfkeyq
		rdword	$C_stTOS , __serin
		test	$C_stTOS , # h100	wz
	if_z	wrword	__h100 , __serin
__serfkeyq_ret
		ret
;asm a_serkey

\ a_seremit( char -- )
build_BootOpt :rasm
		jmpret	__seremit_ret , # __seremit
		spop
		jexit
\
\ - enter - $C_stTOS - char to emit
\ - exit  - $C_stTOS - char to emit
\
__seremit
		and	$C_stTOS , # hFF
\
		rdword	__reg2 , __serout	wz
	if_z	jmp	# __seremit_ret
__poll
		rdword	__reg1 , __reg2
		test	__reg1 , # h100	wz
	if_z	jmp	# __poll
\
		wrword	$C_stTOS , __reg2
__seremit_ret
		ret
;asm a_seremit


\ a_iofkey? ( chan -- char t/f) get a char from the io channel chan
build_BootOpt :rasm
		jmpret	__iofkeyq_ret , # __iofkeyq
		spush
		muxz	$C_stTOS , $C_fLongMask
		jexit
\
\ enter - $C_stTOS - index to io channels
\ exit  - $C_stTOS - char
\       - zflag    - set if the char is valid
\
\
__iofkeyq
		shl    $C_stTOS , # 2
		add    $C_stTOS , par
 		rdword __reg1 , $C_stTOS
		test   __reg1 , # h100	wz
	if_z	wrword __h100 , $C_stTOS
		mov    $C_stTOS , __reg1
__iofkeyq_ret
		ret
;asm a_iofkey?

\ a_iofemit? ( char chan -- t/f) emit a char to the io channel chan
build_BootOpt :rasm
		mov	__reg1 , $C_stTOS
		spop

		jmpret	__iofemitq_ret , # __iofemitq
		muxz	$C_stTOS , $C_fLongMask
		jexit
\
\ - enter - $C_stTOS - char
\         - __reg1 - chan number
\
\ - exit  - $C_stTOS - don't care
\         - zflag - set if ready for a char
\
__iofemitq
		shl	__reg1 , # 2
		add	__reg1 , par
		add	__reg1 , # 2
\
		rdword	__reg2 , __reg1	wz
	if_z	jmp	# __iofemitq_ret

		rdword	__reg3 , __reg2
		test	__reg3 , # h100	wz
		muxz	__reg3 , $C_fLongMask	nr wz
\
	if_z	wrword	$C_stTOS , __reg2 

__iofemitq_ret
		ret
;asm a_iofemit?


\ a_ioemit? ( chan -- t/f) is the channel ready for a character emit
build_BootOpt :rasm
		jmpret	__ioemitq_ret , # __ioemitq
		muxz	$C_stTOS , $C_fLongMask
		jexit

\
\ - enter - $C_stTOS - chan
\ - exit  - $C_stTOS - don't care
\         - zflag - set if ready for a char
\
__ioemitq
		shl	$C_stTOS , # 2
		add	$C_stTOS , par
		add	$C_stTOS , # 2
\
		rdword	__reg1 , $C_stTOS	wz
	if_z	jmp	# __ioemitq_ret

		rdword	__reg2 , __reg1
		test	__reg2 , # h100	wz
		muxz	__reg3 , $C_fLongMask	nr wz

__ioemitq_ret
		ret
;asm a_ioemit?



\ a_iobufcount? ( buf# _iobuf _bmask  -- count)
build_BootOpt :rasm
		mov	__mx_bmask , $C_stTOS
		spop
		mov	__mx_iobuf , $C_stTOS
		spop

		jmpret	__iobufcountq_ret , # __iobufcountq
		jexit

\
\ - enter - $C_stTOS - buf#
\ - exit  - $C_stTOS - count
\         - zflag - set if count is zero
\
__iobufcountq
		shl	$C_stTOS , # 1
		add	$C_stTOS , __mx_iobuf

		rdbyte	__reg6 , $C_stTOS
		add	$C_stTOS , # 1
		rdbyte	__reg5 , $C_stTOS

		sub	__reg6 , __reg5
		and	__reg6 , __mx_bmask
		mov	$C_stTOS , __reg6	wz
__iobufcountq_ret
		ret

__mx_bmask
	0
__mx_iobuf
	0
;asm a_iobufcount?

\ a_iobufkey? ( buf# _iobuf _bmask  _bshift _buf_offset -- char t/f)
build_BootOpt :rasm
		mov	__mx_buf_offset , $C_stTOS
		spop
		mov	__mx_bshift , $C_stTOS
		spop
		mov	__mx_bmask , $C_stTOS
		spop
		mov	__mx_iobuf , $C_stTOS
		spop

		jmpret	__iobufkeyq_ret , # __iobufkeyq
		spush
		muxz	$C_stTOS , $C_fLongMask
		jexit

\
\ - enter - $C_stTOS - buf#
\ - exit  - $C_stTOS - char
\         - zflag - set char is valid
\ __reg6 - head
\ __reg5 - tail
\
\ __reg4 - head/tail pointer
\
__iobufkeyq
		mov	__reg4 , $C_stTOS
		shl	__reg4 , # 1
		add	__reg4 , __mx_iobuf

		rdbyte	__reg6 , __reg4
		add	__reg4 , # 1
		rdbyte	__reg5 , __reg4

		cmp	__reg6 , __reg5	wz
		muxz	__reg3 , $C_fLongMask	nr wz
	if_nz	jmp	# __iobufkeyq_ret

		mov	__reg3 , $C_stTOS
		shl	__reg3 , __mx_bshift
		add	__reg3 , __mx_iobuf
		add	__reg3 , __mx_buf_offset
		add	__reg3 , __reg5
		
		rdbyte	$C_stTOS , __reg3

		add	__reg5 , # 1
		and	__reg5 , __mx_bmask
		wrbyte	__reg5 , __reg4
__iobufkeyq_ret
		ret

__mx_buf_offset
	0
__mx_bshift
	0
__mx_bmask
	0
__mx_iobuf
	0
;asm a_iobufkey?

\ a_iobufemit? ( char buf# _iobuf _bmask  _bshift _buf_offset -- t/f)
build_BootOpt :rasm
		mov	__mx_buf_offset , $C_stTOS
		spop
		mov	__mx_bshift , $C_stTOS
		spop
		mov	__mx_bmask , $C_stTOS
		spop
		mov	__mx_iobuf , $C_stTOS
		spop

		mov	__reg1 , $C_stTOS
		spop
		jmpret	__iobufemitq_ret , # __iobufemitq
		muxz	$C_stTOS , $C_fLongMask
		jexit
\
\ - enter - $C_stTOS - char
\         - __reg1 - buf#
\ - exit  - $C_stTOS - don,t care
\         - zflag - set char is valid
\ __reg6 - head
\ __reg5 - tail
\
\ __reg4 - head/tail pointer
\
__iobufemitq
		mov	__reg4 , __reg1
		shl	__reg4 , # 1
		add	__reg4 , __mx_iobuf

		rdbyte	__reg6 , __reg4
		add	__reg4 , # 1
		rdbyte	__reg5 , __reg4

		mov	__reg2 , __reg6
		add	__reg2 , # 1
		and	__reg2 , __mx_bmask

		cmp	__reg2 , __reg5	wz
		muxz	__reg3 , $C_fLongMask	nr wz
	if_nz	jmp	# __iobufemitq_ret


		mov	__reg3 , __reg1
		shl	__reg3 , __mx_bshift
		add	__reg3 , __mx_iobuf
		add	__reg3 , __mx_buf_offset
		add	__reg3 , __reg6
		
		wrbyte	$C_stTOS , __reg3

		sub	__reg4 , # 1
		wrbyte	__reg2 , __reg4
__iobufemitq_ret
		ret

__mx_buf_offset
	0
__mx_bshift
	0
__mx_bmask
	0
__mx_iobuf
	0
;asm a_iobufemit?



cr hA state andnC!
*/


var scode string = `
fl
\
\ serial line protocol - 
\ b011X_XXXX count cc - X is chan number count is number of characters following + h20
\ b010Y_YYYY - ack Y is chan number
\


lockdict create a_serfkey? forthentry
$C_a_lxasm w, h11C  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyJQL l, z1SyZSO l, z1SyJQL l, z1riPR6 l, z1SV01X l, z4iPV2 l, z1YVPS0 l, z4Ara2 l,
z1SV000 l,
freedict




lockdict create a_serkey forthentry
$C_a_lxasm w, h11D  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyJQL l, z1SyZ4M l, z1SV01X l, z1SyZ[P l, z1SL04M l, z1SV000 l, z4iPV2 l, z1YVPS0 l,
z4Ara2 l, z1SV000 l,
freedict




lockdict create a_seremit forthentry
$C_a_lxasm w, h11E  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyZfM l, z1SyLI[ l, z1SV01X l, z1WyPRy l, z6isN3 l, z1SQ04T l, z4isFA l, z1YVsC0 l,
z1SQ04P l, z4FPVA l, z1SV000 l,
freedict




lockdict create a_iofkey? forthentry
$C_a_lxasm w, h11E  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyZfN l, z1SyJQL l, z1riPR6 l, z1SV01X l, zfyPO2 l, z20iPVj l, z4isBB l, z1YVsC0 l,
z4ArZB l, z2WiPV9 l, z1SV000 l,
freedict




lockdict create a_iofemit? forthentry
$C_a_lxasm w, h122  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z2WisBB l, z1SyLI[ l, z1Sy[CO l, z1riPR6 l, z1SV01X l, zfys82 l, z20isFj l, z20ys82 l,
z6isN9 l, z1SQ04X l, z4isVA l, z1YVsS0 l, z1tFsR6 l, z4APVA l, z1SV000 l,
freedict




lockdict create a_ioemit? forthentry
$C_a_lxasm w, h11F  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyZnM l, z1riPR6 l, z1SV01X l, zfyPO2 l, z20iPVj l, z20yPO2 l, z6isBB l, z1SQ04U l,
z4isN9 l, z1YVsK0 l, z1tFsR6 l, z1SV000 l,
freedict




lockdict create a_iobufcount? forthentry
$C_a_lxasm w, h124  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z2Wi[JB l, z1SyLI[ l, z2Wi[RB l, z1SyLI[ l, z1Sy[CP l, z1SV01X l, zfyPO1 l, z20iPSZ l,
zismB l, z20yPO1 l, ziseB l, z24isqD l, z1WisnY l, z2YiPVE l, z1SV000 l, 0 l,
0 l,
freedict




lockdict create a_iobufkey? forthentry
$C_a_lxasm w, h136  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z2Wi]JB l, z1SyLI[ l, z2Wi]RB l, z1SyLI[ l, z2Wi]ZB l, z1SyLI[ l, z2Wi]eB l, z1SyLI[ l,
z1Sy]CV l, z1SyJQL l, z1riPR6 l, z1SV01X l, z2WisZB l, zfysW1 l, z20is[o l, zisqC l,
z20ysW1 l, zisiC l, z26FsqD l, z1tFsR6 l, z1SL04k l, z2WisRB l, zfisSm l, z20isSo l,
z20isSl l, z20isVD l, ziPVB l, z20ysb1 l, z1Wisfn l, zFsiC l, z1SV000 l, 0 l,
0 l, 0 l, 0 l,
freedict




lockdict create a_iobufemit? forthentry
$C_a_lxasm w, h139  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z2Wi]eB l, z1SyLI[ l, z2Wi]mB l, z1SyLI[ l, z2Wi]uB l, z1SyLI[ l, z2Wia3B l, z1SyLI[ l,
z2WisBB l, z1SyLI[ l, z1Sy][W l, z1riPR6 l, z1SV01X l, z2Wisa9 l, zfysW1 l, z20is[r l,
zisqC l, z20ysW1 l, zisiC l, z2WisNE l, z20ysG1 l, z1WisKq l, z26FsND l, z1tFsR6 l,
z1SL04n l, z2WisV9 l, zfisSp l, z20isSr l, z20isSo l, z20isVE l, zFPVB l, z24ysW1 l,
zFsNC l, z1SV000 l, 0 l, 0 l, 0 l, 0 l,
freedict



[ifndef $C_rsPtr
    hCA wconstant $C_rsPtr
]
\
\ These constants will be sent by muxserial
[ifndef _MX_BSHIFT
d_4	wconstant _MX_BSHIFT
d_16	wconstant _MX_BSIZE
d_15	wconstant _MX_BMASK
d_32	wconstant _MX_NUM_CHAN
d_128	wconstant _MX_BUF_OFFSET
]
\
\
\
0 wconstant _slicearray
: slice
	dup
	$C_rsPtr COG@ 1+ COG@
	over 2* _slicearray + W!
	1+ h3 and 2* _slicearray + W@
	$C_rsPtr COG@ 1+ COG!
\
	$C_stTop $C_stPtr COG@ - 3 -
	dup 1 <>
	if
		." ERROR " . ." items on stack -- task " . cr cr cr
		100 delms
		reset
	else
		2drop
	then
;
\
\ 0			- _MX_NUM_CHAN * head tail
\ _MX_BUF_OFFSET	- _MX_NUM_CHAN*2 * 16 byte buffer
\ _MX_BUF_OFFSET+d_1024	- end
\
\
0 wconstant _iobuf
0 variable _stateflags
\

\ _c2c_ioin ( -- ) if the stateflag bit is 1, are characters in the buffer
\		send them, and set the stateflag bit to 0 indicating we are waiting for an acknowledgement
: _c2c_ioin
	begin
		0 slice
		_MX_NUM_CHAN 0
		do
			_stateflags L@ i >m and
			if
				i _MX_NUM_CHAN + _iobuf _MX_BMASK a_iobufcount? dup
				if
					dup
					i h60 + a_seremit h20 + a_seremit
\ grab up to _MX_BMASK characters
					0
					do
						j _MX_NUM_CHAN + _iobuf _MX_BMASK _MX_BSHIFT _MX_BUF_OFFSET a_iobufkey?
						if
							a_seremit
						else
							h33 ERR
						then
					loop
					_stateflags L@ i >m andn _stateflags L!
				else
					drop
				then
			then
  		loop
	0 until
;
\ _c2c_serin ( -- ) process input chars from the serial channel
\ 	     if it is an ack, set the stateflag bit back to 1
\	     if it is a data byte, buffer it 
: _c2c_serin
	begin
		1 slice
		begin
			a_serfkey?
			if
				dup hE0 and h40 =
				if
					h1F and >m _stateflags L@ or _stateflags L!
				else
					dup hE0 and h60 =
					if
						h1F and
						a_serkey h20 - 0
						do
							a_serkey over
							_iobuf _MX_BMASK _MX_BSHIFT _MX_BUF_OFFSET a_iobufemit? 0=
							if
								h9A ERR
							then
						loop
						drop
					else
					        h99 ERR
					then
				then
				0
			else
				drop
				-1
			then
		until
	0 until
;

\ _c2c_ioout ( -- ) process the buffered chars and send an ack 
: _c2c_ioout
	begin
		2 slice

		_MX_NUM_CHAN 0
		do
			_MX_BMASK 0
			do
				j a_ioemit?
				if
					j _iobuf _MX_BMASK _MX_BSHIFT _MX_BUF_OFFSET a_iobufkey?
					if
						j a_iofemit?
						if
							j _iobuf _MX_BMASK a_iobufcount? 0=
							if
								j h40 + a_seremit
							then
						else
							h9B ERR
						then
					else
						drop leave
					then
				else
					leave
				then
			loop
		loop
	0 until
;

\ _c2c_ioinbuf ( -- )  see if there is a byte to accept from the channel in, if there is space, buffer it
: _c2c_ioinbuf
	begin
		3 slice
		_MX_NUM_CHAN 0
		do
			_MX_BMASK 0
			do
				j _MX_NUM_CHAN + _iobuf _MX_BMASK a_iobufcount? _MX_BMASK =
				if
					leave
				else
					j a_iofkey?
					if
						j _MX_NUM_CHAN + _iobuf _MX_BMASK _MX_BSHIFT _MX_BUF_OFFSET a_iobufemit? 0=
						if
							h44 ERR
						then
					else
						drop leave
					then
				then
			loop
  		loop


	0 until
;

: gos
	lockdict here W@ _MX_BUF_OFFSET d_1024 + allot freedict c" _iobuf" find
	if
		2+ W!
	else
		hFC ERR
	then
	_iobuf _MX_BUF_OFFSET 0 fill
\
\ protocol structure
\
\ __mx_serin, __mx_serout, __mx_h100
\
	hD8 _p+ h1C2 COG! 
	hDA _p+ h1C3 COG!
	h100 h1C4 COG!
\ buf
	_MX_BUF_OFFSET h1C5 COG!
	_MX_BSHIFT h1C6 COG!
	_MX_BMASK h1C7 COG!
	_iobuf h1C8 COG!

\
	lockdict here W@ 8 allot freedict c" _slicearray" find
	if
		2+ W!
	else
		hFC ERR
	then
\
	c" _c2c_ioin" find drop 0 2* _slicearray + W!
	c" _c2c_serin" find drop 1 2* _slicearray + W!
	c" _c2c_ioout" find drop 2 2* _slicearray + W!
	c" _c2c_ioinbuf" find drop 3 2* _slicearray +  W!
\	
	1 7 sersetflags
	cogid iodis
\
\ set the cog to busy
	c" MX_SERIAL" cds W!
	4 state andnC!
	hE0 state orC!
\
\ set up channels as input to this cog
	io _MX_NUM_CHAN 4* bounds
	do
		h100 i L!
	4 +loop

	_MX_NUM_CHAN 6 min 0
	do
		cogid i i 0 (ioconn)
	loop
	_MX_NUM_CHAN 6 >
	if
		_MX_NUM_CHAN 4* io + d_6 4* io +
		do
			i dup 2+ W!
		4 +loop
	then
\
\ set up the serial io channel and connect it
	7 cogio h100 hD8 _p+ L!
	hD8 _p+ 2dup 2+ W! swap 2+ W!
\
\ flags for each channel, 0 indicates we have sent a byte and are waiting for an ack
	-1 _stateflags L!
\
\ send a ! then wait for a !
	h21 a_seremit
	begin
		a_serkey
		h21 =
	until
	_c2c_ioin
;



`
