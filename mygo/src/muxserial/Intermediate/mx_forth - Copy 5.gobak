package muxserial

/*
fl

\ a_serfkey?( -- char t/f)
build_BootOpt :rasm
		spush
		jmpret	__serfkeyq_ret , # __serfkeyq
		spush
		muxz	$C_stTOS , $C_fLongMask
		jexit

\
\ enter - $C_stTOS - don't care
\ exit  - $C_stTOS - char
\       - zflag    - set if the char is valid
\
\
__serfkeyq
		mov	$C_stTOS , par 
		add	$C_stTOS , # hD8
		rdword	$C_treg1 , $C_stTOS
		test	$C_treg1 , # h100	wz

	if_nz	jmp	# __sfqn
		mov	$C_treg2 , # h100
		wrword	$C_treg2 , $C_stTOS
__sfqn
		mov	$C_stTOS , $C_treg1
__serfkeyq_ret
		ret
;asm a_serfkey?

\ a_serkeyc( -- char)
build_BootOpt :rasm
		spush
		jmpret	__serkey_ret , # __serkey
		jexit
\
\ - enter - $C_stTOS - don't care
\ - exit  - $C_stTOS - char
\
__serkey
		mov	$C_treg1 , par 
		add	$C_treg1 , # hD8
__sklp
		rdword	$C_stTOS , $C_treg1

		test	$C_stTOS , # h100	wz
	if_nz	jmp	# __sklp
		mov	$C_treg2 , # h100
		wrword	$C_treg2 , $C_treg1
__serkey_ret
		ret
;asm a_serkey

\ a_seremit( char -- )
build_BootOpt :rasm
		jmpret	__seremit_ret , # __seremit
		spop
		jexit
\
\ - enter - $C_stTOS - char to emit
\ - exit  - $C_stTOS - char to emit
\
__seremit
		and	$C_stTOS , # hFF
		mov	$C_treg1 , par
		add	$C_treg1 , # hDA
\
		rdword	$C_treg2 , $C_treg1	wz
	if_z	jmp	# __seremit_ret
__poll
		rdword	$C_treg1 , $C_treg2
		test	$C_treg1 , # h100	wz
	if_z	jmp	# __poll
\
		wrword	$C_stTOS , $C_treg2
__seremit_ret
		ret
;asm a_seremit

fl

\ a_iofkey? ( chan -- char t/f) get a char from the io channel chan
build_BootOpt :rasm
		jmpret	__iofkeyq_ret , # __iofkeyq
		spush
		muxz	$C_stTOS , $C_fLongMask
		jexit
\
\ enter - $C_stTOS - index to io channels
\ exit  - $C_stTOS - char
\       - zflag    - set if the char is valid
\
\
__iofkeyq
		shl    $C_stTOS , # 2
		add    $C_stTOS , par
 		rdword $C_treg1 , $C_stTOS
		test   $C_treg1 , # h100	wz

	if_nz	jmp	   # __x01
		mov    $C_treg2 , # h100
		wrword $C_treg2 , $C_stTOS
__x01
		mov    $C_stTOS , $C_treg1
__iofkeyq_ret
		ret
;asm a_iofkey?

\ a_iofemit? ( char chan -- t/f) emit a char to the io channel chan
build_BootOpt :rasm
		spopt
		jmpret	__iofemitq_ret , # __iofemitq
		muxz	$C_stTOS , $C_fLongMask
		jexit
\
\ - enter - $C_stTOS - char
\         - $C_treg1 - chan number
\
\ - exit  - $C_stTOS - don't care
\         - zflag - set if ready for a char
\
__iofemitq
		shl	$C_treg1 , # 2
		add	$C_treg1 , par
		add	$C_treg1 , # 2
\
		rdword	$C_treg2 , $C_treg1	wz
	if_z	jmp	# __iofemitq_ret

		rdword	$C_treg3 , $C_treg2
		test	$C_treg3 , # h100	wz
		muxz	$C_treg3 , $C_fLongMask	nr wz
\
	if_z	wrword	$C_stTOS , $C_treg2 

__iofemitq_ret
		ret
;asm a_iofemit?


\ a_ioemit? ( chan -- t/f) is the channel ready for a character emit
build_BootOpt :rasm
		jmpret	__ioemitq_ret , # __ioemitq
		muxz	$C_stTOS , $C_fLongMask
		jexit

\
\ - enter - $C_stTOS - chan
\ - exit  - $C_stTOS - don't care
\         - zflag - set if ready for a char
\
__ioemitq
		shl	$C_stTOS , # 2
		add	$C_stTOS , par
		add	$C_stTOS , # 2
\
		rdword	$C_treg1 , $C_stTOS	wz
	if_z	jmp	# __ioemitq_ret

		rdword	$C_treg2 , $C_treg1
		test	$C_treg2 , # h100	wz
		muxz	$C_treg3 , $C_fLongMask	nr wz

__ioemitq_ret
		ret
;asm a_ioemit?



\ a_iobufcount? ( buf# _iobuf _bmask  -- count)
build_BootOpt :rasm
		mov	__mx_bmask , $C_stTOS
		spop
		mov	__mx_iobuf , $C_stTOS
		spop

		jmpret	__iobufcountq_ret , # __iobufcountq
		jexit

\
\ - enter - $C_stTOS - buf#
\ - exit  - $C_stTOS - count
\         - zflag - set if count is zero
\
__iobufcountq
		shl	$C_stTOS , # 1
		add	$C_stTOS , __mx_iobuf

		rdbyte	$C_treg6 , $C_stTOS
		add	$C_stTOS , # 1
		rdbyte	$C_treg5 , $C_stTOS

		sub	$C_treg6 , $C_treg5
		and	$C_treg6 , __mx_bmask
		mov	$C_stTOS , $C_treg6	wz
__iobufcountq_ret
		ret

__mx_bmask
	0
__mx_iobuf
	0
;asm a_iobufcount?


\ _iobufkey? ( buf# -- char t/f) get a char from the buffer
: _iobufkey?
	dup 2* _iobuf +

\ ( buf# htptr -- )
	dup C@ over 1+ C@

\ ( buf# htptr head tail -- )
	2dup =
	if
		3drop 0
	else
		nip
\ ( buf# htptr tail -- )
		rot _MX_BSHIFT lshift _MX_BUF_OFFSET + + _iobuf +
		C@
\
\ ( htptr char -- )
		swap 1+ dup C@ 1+ _MX_BMASK and swap C!
		-1
	then
;

fl

\ a_iobufkey? ( buf# _iobuf _bmask  _bshift _buf_offset -- count)
build_BootOpt :rasm
		mov	__mx_buf_offset , $C_stTOS
		spop
		mov	__mx_bshift , $C_stTOS
		spop
		mov	__mx_bmask , $C_stTOS
		spop
		mov	__mx_iobuf , $C_stTOS
		spop

		jmpret	__iobufkeyq_ret , # __iobufkeyq
		spush
		muxz	$C_stTOS , $C_fLongMask
		jexit

\
\ - enter - $C_stTOS - buf#
\ - exit  - $C_stTOS - char
\         - zflag - set char is valid
\ treg6 - head
\ treg5 - tail
\
\ treg4 - head/tail pointer
\
__iobufkeyq
		mov	$C_treg4 , $C_stTOS
		shl	$C_treg4 , # 1
		add	$C_treg4 , __mx_iobuf

		rdbyte	$C_treg6 , $C_treg4
		add	$C_treg4 , # 1
		rdbyte	$C_treg5 , $C_treg4

		cmp	$C_treg6 , $C_treg5	wz
		muxz	$C_treg3 , $C_fLongMask	nr wz
	if_nz	jmp	# __iobufkeyq_ret

		mov	$C_treg3 , $C_stTOS
		shl	$C_treg3 , __mx_bshift
		add	$C_treg3 , __mx_iobuf
		add	$C_treg3 , __mx_buf_offset
		add	$C_treg3 , $C_treg5
		
		rdbyte	$C_stTOS , $C_treg3

		add	$C_treg5 , # 1
		and	$C_treg5 , __mx_bmask
		wrbyte	$C_treg5 , $C_treg4
__iobufkeyq_ret
		ret

__mx_buf_offset
	0
__mx_bshift
	0
__mx_bmask
	0
__mx_iobuf
	0
;asm a_iobufkey?


*/


var scode string = `
fl
\
\ serial line protocol - 
\ b011X_XXXX count cc - X is chan number count is number of characters following + h20
\ b010Y_YYYY - ack Y is chan number
\
\




lockdict create a_serfkey? forthentry
$C_a_lxasm w, h121  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyJQL l, z1Sy[4O l, z1SyJQL l, z1riPR6 l, z1SV01X l, z2WiPVj l, z20yPRO l, z4iPZB l,
z1YVP[0 l, z1SL04V l, z2WyPf0 l, z4FPeB l, z2WiPRC l, z1SV000 l,
freedict


lockdict create a_serkey forthentry
$C_a_lxasm w, h11E  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyJQL l, z1SyZfM l, z1SV01X l, z2WiPaj l, z20yPZO l, z4iPRC l, z1YVPS0 l, z1SL04O l,
z2WyPf0 l, z4FPeC l, z1SV000 l,
freedict


lockdict create a_seremit forthentry
$C_a_lxasm w, h120  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyZvM l, z1SyLI[ l, z1SV01X l, z1WyPRy l, z2WiPaj l, z20yPZQ l, z6iPeC l, z1SQ04V l,
z4iPZD l, z1YVP[0 l, z1SQ04R l, z4FPRD l, z1SV000 l,
freedict


lockdict create a_iofkey? forthentry
$C_a_lxasm w, h120  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyZvN l, z1SyJQL l, z1riPR6 l, z1SV01X l, zfyPO2 l, z20iPVj l, z4iPZB l, z1YVP[0 l,
z1SL04U l, z2WyPf0 l, z4FPeB l, z2WiPRC l, z1SV000 l,
freedict

lockdict create a_iofemit? forthentry
$C_a_lxasm w, h121  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyLIZ l, z1Sy[4N l, z1riPR6 l, z1SV01X l, zfyPW2 l, z20iPaj l, z20yPW2 l, z6iPeC l,
z1SQ04W l, z4iPmD l, z1YVPn0 l, z1tFPm6 l, z4APRD l, z1SV000 l,
freedict


lockdict create a_ioemit? forthentry
$C_a_lxasm w, h11F  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SyZnM l, z1riPR6 l, z1SV01X l, zfyPO2 l, z20iPVj l, z20yPO2 l, z6iPZB l, z1SQ04U l,
z4iPeC l, z1YVPf0 l, z1tFPm6 l, z1SV000 l,
freedict


lockdict create a_iobufcount? forthentry
$C_a_lxasm w, h124  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z2Wi[JB l, z1SyLI[ l, z2Wi[RB l, z1SyLI[ l, z1Sy[CP l, z1SV01X l, zfyPO1 l, z20iPSZ l,
ziQBB l, z20yPO1 l, ziQ3B l, z24iQBG l, z1WiQCY l, z2YiPRH l, z1SV000 l, 0 l,
0 l,
freedict


lockdict create a_iobufkey? forthentry
$C_a_lxasm w, h136  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z2Wi]JB l, z1SyLI[ l, z2Wi]RB l, z1SyLI[ l, z2Wi]ZB l, z1SyLI[ l, z2Wi]eB l, z1SyLI[ l,
z1Sy]CV l, z1SyJQL l, z1riPR6 l, z1SV01X l, z2WiPuB l, zfyPr1 l, z20iPvo l, ziQBF l,
z20yPr1 l, ziQ3F l, z26FQBG l, z1tFPm6 l, z1SL04k l, z2WiPmB l, zfiPnm l, z20iPno l,
z20iPnl l, z20iPmG l, ziPRE l, z20yQ01 l, z1WiQ4n l, zFQ3F l, z1SV000 l, 0 l,
0 l, 0 l, 0 l,
freedict



[ifndef $C_rsPtr
    hCA wconstant $C_rsPtr
]
\
\ These constants will be sent by muxserial
[ifndef _MX_BSHIFT
d_4	wconstant _MX_BSHIFT
d_16	wconstant _MX_BSIZE
d_15	wconstant _MX_BMASK
d_32	wconstant _MX_NUM_CHAN
d_128	wconstant _MX_BUF_OFFSET
]
\
\
\
0 wconstant _slicearray
: slice
	dup
	$C_rsPtr COG@ 1+ COG@
	over 2* _slicearray + W!
	1+ h3 and 2* _slicearray + W@
	$C_rsPtr COG@ 1+ COG!
\
	$C_stTop $C_stPtr COG@ - 3 -
	dup 1 <>
	if
		." ERROR " . ." items on stack -- task " . cr cr cr
		100 delms
		reset
	else
		2drop
	then
;
\
\ 0			- _MX_NUM_CHAN * head tail
\ _MX_BUF_OFFSET	- _MX_NUM_CHAN*2 * 16 byte buffer
\ _MX_BUF_OFFSET+d_1024	- end
\
\
0 wconstant _iobuf
0 variable _stateflags
\


\ _iobufcount? ( buf# -- count) true if buffer is empty
: _iobufcount?
	_iobuf _MX_BMASK a_iobufcount?

\	2* _iobuf +
\ ( htptr -- )
\	dup C@ swap 1+ C@ -
\ ( head tail -- )
\	_MX_BMASK and
;


\ _iobufempty? ( buf# -- t/f) true if buffer is empty
: _iobufempty?
	_iobufcount? 0=
;

\ _iobuffull? ( buf# -- t/f) true if buffer is full
: _iobuffull?
	_iobufcount? _MX_BMASK =
;

\ _iobufkey? ( buf# -- char t/f) get a char from the buffer
: _iobufkey?
\ a_iobufkey? ( buf# _iobuf _bmask  _bshift _buf_offset -- char t/f)
	_iobuf _MX_BMASK _MX_BSHIFT _MX_BUF_OFFSET a_iobufkey?
;
{
	dup 2* _iobuf +

\ ( buf# htptr -- )
	dup C@ over 1+ C@

\ ( buf# htptr head tail -- )
	2dup =
	if
		3drop 0
	else
		nip
\ ( buf# htptr tail -- )
		rot _MX_BSHIFT lshift _MX_BUF_OFFSET + + _iobuf +
		C@
\
\ ( htptr char -- )
		swap 1+ dup C@ 1+ _MX_BMASK and swap C!
		-1
	then
;
}

\ _iobufemit? ( char buf# -- t/f ) store a char in the buffer
: _iobufemit?
	dup 2* _iobuf +

\ ( char buf# htptr -- )
	dup C@ over 1+ C@

\ ( char buf# htptr head tail -- )
	over 1+ _MX_BMASK and =
	if

\ ( char buf# htptr head -- )
		2drop 2drop 0

	else
		rot _MX_BSHIFT lshift _MX_BUF_OFFSET + + _iobuf +

\ ( char htptr ptr -- )
		rot swap C!
		dup C@ 1+ _MX_BMASK and swap C!
		-1
	then
;

\ _c2c_ioin ( -- ) if the stateflag bit is 1, are characters in the buffer
\		send them, and set the stateflag bit to 0 indicating we are waiting for an acknowledgement
: _c2c_ioin
	begin
		0 slice
		_MX_NUM_CHAN 0
		do
			_stateflags L@ i >m and
			if
				i _MX_NUM_CHAN + _iobufcount? dup
				if
					dup
					i h60 + a_seremit h20 + a_seremit
\ grab up to _MX_BMASK characters
					0
					do
						j _MX_NUM_CHAN + _iobufkey?
						if
							a_seremit
						else
							h33 ERR
						then
					loop
					_stateflags L@ i >m andn _stateflags L!
				else
					drop
				then
			then
  		loop
	0 until
;
\ _c2c_serin ( -- ) process input chars from the serial channel
\ 	     if it is an ack, set the stateflag bit back to 1
\	     if it is a data byte, buffer it 
: _c2c_serin
	begin
		1 slice
		begin
			a_serfkey?
			if
				dup hE0 and h40 =
				if
					h1F and >m _stateflags L@ or _stateflags L!
				else
					dup hE0 and h60 =
					if
						h1F and
						a_serkey h20 - 0
						do
							a_serkey over
							_iobufemit? 0=
							if
								h9A ERR
							then
						loop
						drop
					else
					        h99 ERR
					then
				then
				0
			else
				drop
				-1
			then
		until
	0 until
;

\ _c2c_ioout ( -- ) process the buffered chars and send an ack 
: _c2c_ioout
	begin
		2 slice

		_MX_NUM_CHAN 0
		do
			_MX_BMASK 0
			do
				j a_ioemit?
				if
					j _iobufkey?
					if
						j a_iofemit?
						if
							j _iobufempty?
							if
								j h40 + a_seremit
							then
						else
							h9B ERR
						then
					else
						drop leave
					then
				else
					leave
				then
			loop
		loop
	0 until
;

\ _c2c_ioinbuf ( -- )  see if there is a byte to accept from the channel in, if there is space, buffer it
: _c2c_ioinbuf
	begin
		3 slice
		_MX_NUM_CHAN 0
		do
			_MX_BMASK 0
			do
				j _MX_NUM_CHAN + _iobuffull?
				if
					leave
				else
					j a_iofkey?
					if
						j _MX_NUM_CHAN + _iobufemit? 0=
						if
							h44 ERR
						then
					else
						drop leave
					then
				then
			loop
  		loop


	0 until
;

: gos
	lockdict here W@ _MX_BUF_OFFSET d_1024 + allot freedict c" _iobuf" find
	if
		2+ W!
	else
		hFC ERR
	then
	_iobuf _MX_BUF_OFFSET 0 fill
\
	lockdict here W@ 8 allot freedict c" _slicearray" find
	if
		2+ W!
	else
		hFC ERR
	then
\
	c" _c2c_ioin" find drop 0 2* _slicearray + W!
	c" _c2c_serin" find drop 1 2* _slicearray + W!
	c" _c2c_ioout" find drop 2 2* _slicearray + W!
	c" _c2c_ioinbuf" find drop 3 2* _slicearray +  W!
\	
	1 7 sersetflags
	cogid iodis
\
\ set the cog to busy
	c" MX_SERIAL" cds W!
	4 state andnC!
	hE0 state orC!
\
\ set up channels as input to this cog
	io _MX_NUM_CHAN 4* bounds
	do
		h100 i L!
	4 +loop

	_MX_NUM_CHAN 6 min 0
	do
		cogid i i 0 (ioconn)
	loop
	_MX_NUM_CHAN 6 >
	if
		_MX_NUM_CHAN 4* io + d_6 4* io +
		do
			i dup 2+ W!
		4 +loop
	then
\
\ set up the serial io channel and connect it
	7 cogio h100 hD8 _p+ L!
	hD8 _p+ 2dup 2+ W! swap 2+ W!
\
\ flags for each channel, 0 indicates we have sent a byte and are waiting for an ack
	-1 _stateflags L!
\
\ send a ! then wait for a !
	h21 a_seremit
	begin
		a_serkey
		h21 =
	until
	_c2c_ioin
;



`
