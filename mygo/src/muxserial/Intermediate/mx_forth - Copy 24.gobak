package muxserial

/*
fl
\
\ structure in cog memory for the prtotcol driver
\

h1DC
   dup wconstant __iobuf
1+ dup wconstant __+offset
1+ dup wconstant __serin
1+ dup wconstant __serout
1+ dup wconstant __h100
1+ dup wconstant __bshift
1+ dup wconstant __bmask
1+ dup wconstant __numchan
1+ dup wconstant __stateflags


1+ dup wconstant __lc
1+ dup wconstant __olc
1+ dup wconstant __index
1+ dup wconstant __mask

1+ dup wconstant __stTOS
1+ dup wconstant __reg1
1+ dup wconstant __reg2
1+ dup wconstant __reg3
1+ dup wconstant __reg4
1+ dup wconstant __reg5
1+ dup wconstant __reg6


\ a_iobuf( -- )
build_BootOpt :rasm

__mx_protocol

__serin_next
		jmpret	__serfkeyq_ret , # __serfkeyq
	if_nz	jmp	# __serinexit
		
		mov	__reg2 , __stTOS
		and	__reg2 , # hE0

		mov	__reg1 , __stTOS
		and	__reg1 , # h1F

		cmp	__reg2 , # h40	wz
	if_ne	jmp	# __serin_notack

		mov	__reg3 , # 1
		shl	__reg3 , __reg1
		or	__stateflags , __reg3
		jmp	# __serin_next

__serin_notack
		cmp	__reg2 , # h60	wz
\
\ not a byte we were expecting, bail
\
\	if_nz	mov	$C_treg6 , # h99		********************************
\	if_nz	jmp	# $C_a_reset
		
\		mov	__reg1 , __stTOS
		jmpret	__serkey_ret , # __serkey
		mov	__lc , __stTOS
		sub	__lc , # h20
__serin_chars
		jmpret	__serkey_ret , # __serkey
		jmpret	__iobufemitq_ret , # __iobufemitq
\
\ there is supposed to be room, bail
\
\	if_nz	mov	$C_treg6 , # h9A		***********************************
\	if_nz	jmp	# $C_a_reset
		djnz	__lc , # __serin_chars
		jmp	# __serin_next

__serinexit


__ioin
		mov	__olc , __numchan
		mov	__index , __numchan
		sub	__index , # 1
		mov	__mask , # 1
		shl	__mask , __index



__ioin_outerlp
		test	__stateflags , __mask	wz
	if_z	jmp	# __ioin_next


		mov	__stTOS , __index
		add	__stTOS , __numchan
		jmpret	__iobufcountq_ret , # __iobufcountq
	if_z	jmp	# __ioin_next

		mov	__lc , __stTOS

		mov	__stTOS , __index
		add	__stTOS , # h60
		jmpret	__seremit_ret , # __seremit

		mov	__stTOS , __lc
		add	__stTOS , # h20
		jmpret	__seremit_ret , # __seremit


__ioin_innerlp
		mov	__stTOS , __index
		add	__stTOS , __numchan
		jmpret	__iobufkeyq_ret , # __iobufkeyq
\
\ should be space for a char there
\
\	if_nz	mov	$C_treg6 , # h33		*******************************************
\	if_nz	jmp	# $C_a_reset
		
		jmpret	__seremit_ret , # __seremit

		djnz	__lc , # __ioin_innerlp
		andn	__stateflags , __mask
__ioin_next








__iooutbuf_outerlp

		mov	__lc , __bmask
__iooutbuf_innerlp
		mov	__reg1 , __index
		jmpret	__ioemitq_ret , # __ioemitq
	if_nz	jmp	# __iobufoutskip
		
		mov	__stTOS , __index
		jmpret	__iobufkeyq_ret , # __iobufkeyq
	if_nz	jmp	# __iobufoutskip

		mov	__reg1 , __index
		jmpret	__iofemitq_ret , # __iofemitq
\
\ should be good
\
\	if_nz	mov	$C_treg6 , # h9B			*************************************
\	if_nz	jmp	# $C_a_reset

		mov	__stTOS , __index
		jmpret	__iobufcountq_ret , # __iobufcountq

	if_z	mov	__stTOS , __index
	if_z	add	__stTOS , # h40
	if_z	jmpret	__seremit_ret , # __seremit
\
\ try for an echo
\
		mov	__stTOS , __index
		add	__stTOS , __numchan
		jmpret	__iobufcountq_ret , # __iobufcountq
		cmp	__stTOS , __bmask	wz
	if_z	jmp	# __iooutbuf_skipecho

		mov	__stTOS , __index
		jmpret	__iofkeyq_ret , # __iofkeyq
	if_nz	jmp	# __iooutbuf_skipecho
\
		mov	__reg1 , __index
		add	__reg1 , __numchan
		jmpret	__iobufemitq_ret , # __iobufemitq
\
\ should be space
\
\	if_nz	mov	$C_treg6 , # h44			*****************************************
\	if_nz	jmp	# $C_a_reset

__iooutbuf_skipecho



		djnz	__lc , # __iooutbuf_innerlp
__iobufoutskip






__iobuf_lpouter
		mov	__stTOS , __index
		add	__stTOS , __numchan
		jmpret	__iobufcountq_ret , # __iobufcountq

		mov	__lc , __bmask
		sub	__lc , __stTOS	wz
	if_z	jmp	# __iobuf_endouter

__iobuf_lpinner
		mov	__stTOS , __index
		jmpret	__iofkeyq_ret , # __iofkeyq
	if_nz	jmp	# __iobuf_endinner
\
		mov	__reg1 , __index
		add	__reg1 , __numchan
		jmpret	__iobufemitq_ret , # __iobufemitq
\
\ should be space
\
\	if_nz	mov	$C_treg6 , # h44			************************
\	if_nz	jmp	# $C_a_reset

__iobuf_endinner
		djnz	__lc , # __iobuf_lpinner

__iobuf_endouter




		sub	__index , # 1
		shr	__mask , # 1
		djnz	__olc , # __ioin_outerlp
	
		jmp	# __mx_protocol


\
\ enter - __stTOS - index to io channels
\ exit  - __stTOS - char
\       - zflag    - set if the char is valid
\
\
__iofkeyq
		shl    __stTOS , # 2
		add    __stTOS , par
 		rdword __reg1 , __stTOS
		test   __reg1 , # h100	wz
	if_z	wrword __h100 , __stTOS
		mov    __stTOS , __reg1
__iofkeyq_ret
		ret

\
\ - enter - __stTOS - buf#
\ - exit  - __stTOS - count
\         - zflag - set if count is zero
\
__iobufcountq
		shl	__stTOS , # 1
		add	__stTOS , __iobuf

		rdbyte	__reg6 , __stTOS
		add	__stTOS , # 1
		rdbyte	__reg5 , __stTOS

		sub	__reg6 , __reg5
		and	__reg6 , __bmask
		mov	__stTOS , __reg6	wz
__iobufcountq_ret
		ret


\
\ - enter - __stTOS - char
\         - __reg1 - buf#
\ - exit  - __stTOS - don't care
\         - zflag - set char is valid
\ __reg6 - head
\ __reg5 - tail
\
\ __reg4 - head/tail pointer
\
__iobufemitq
		mov	__reg4 , __reg1
		shl	__reg4 , # 1
		add	__reg4 , __iobuf
		rdbyte	__reg6 , __reg4
		add	__reg4 , # 1
		rdbyte	__reg5 , __reg4

		mov	__reg2 , __reg6
		add	__reg2 , # 1
		and	__reg2 , __bmask

		cmp	__reg2 , __reg5	wz
		muxz	__reg3 , $C_fLongMask	nr wz
	if_nz	jmp	# __iobufemitq_ret


		mov	__reg3 , __reg1
		shl	__reg3 , __bshift
		add	__reg3 , __+offset
		add	__reg3 , __reg6
		
		wrbyte	__stTOS , __reg3

		sub	__reg4 , # 1
		wrbyte	__reg2 , __reg4
__iobufemitq_ret
		ret

\
\ - enter - __stTOS - buf#
\ - exit  - __stTOS - char
\         - zflag - set char is valid
\ __reg6 - head
\ __reg5 - tail
\
\ __reg4 - head/tail pointer
\
__iobufkeyq
		mov	__reg4 , __stTOS
		shl	__reg4 , # 1
		add	__reg4 , __iobuf

		rdbyte	__reg6 , __reg4
		add	__reg4 , # 1
		rdbyte	__reg5 , __reg4

		cmp	__reg6 , __reg5	wz
		muxz	__reg3 , $C_fLongMask	nr wz
	if_nz	jmp	# __iobufkeyq_ret

		mov	__reg3 , __stTOS
		shl	__reg3 , __bshift
		add	__reg3 , __+offset
		add	__reg3 , __reg5
		
		rdbyte	__stTOS , __reg3

		add	__reg5 , # 1
		and	__reg5 , __bmask
		wrbyte	__reg5 , __reg4
__iobufkeyq_ret
		ret


\
\ - enter - __stTOS - char
\         - __reg1 - chan number
\
\ - exit  - __stTOS - don't care
\         - zflag - set if ready for a char
\
__iofemitq
		jmpret	__ioemitq_ret , # __ioemitq
	if_z	wrword	__stTOS , __reg2 

__iofemitq_ret
		ret
\
\ - enter - __stTOS - don't care
\         - __reg1 - chan number
\ - exit  - __stTOS - don't care
\         - zflag - set if ready for a char
\
__ioemitq
		shl	__reg1 , # 2
		add	__reg1 , par
		add	__reg1 , # 2
\
		rdword	__reg2 , __reg1	wz
	if_z	jmp	# __ioemitq_ret

		rdword	__reg3 , __reg2
		test	__reg3 , # h100	wz
		muxz	__reg4 , $C_fLongMask	nr wz

__ioemitq_ret
		ret

\
\ - enter - __stTOS - don't care
\ - exit  - __stTOS - char
\
__serkey
		jmpret	__serfkeyq_ret , # __serfkeyq
	if_nz	jmp	# __serkey
__serkey_ret
		ret
\
\ enter - __stTOS - don't care
\ exit  - __stTOS - char
\       - zflag    - set if the char is valid
\
\
__serfkeyq
		rdword	__stTOS , __serin
		test	__stTOS , # h100	wz
	if_z	wrword	__h100 , __serin
__serfkeyq_ret
		ret

\
\ - enter - __stTOS - char to emit
\ - exit  - __stTOS - char to emit
\
__seremit
		and	__stTOS , # hFF
\
		rdword	__reg2 , __serout	wz
	if_z	jmp	# __seremit_ret
__poll
		rdword	__reg1 , __reg2
		test	__reg1 , # h100	wz
	if_z	jmp	# __poll
\
		wrword	__stTOS , __reg2
__seremit_ret
		ret

;asm a_iobuf


cr base W@ swap hex . base W! cr cr



*/


var scode string = `
fl
\
\ serial line protocol - 
\ b011X_XXXX count cc - X is chan number count is number of characters following + h20
\ b010Y_YYYY - ack Y is chan number
\



lockdict create a_iobuf forthentry
$C_a_lxasm w, h1BB  h113  1- tuck - h9 lshift or here W@ alignl h10 lshift or l,
z1SypMi l, z1SL04a l, z2WiwVc l, z1WywRW l, z2WiwNc l, z1WywGV l, z26VwP0 l, z1SL04V l,
z2WywW1 l, zfiwad l, z1bivaf l, z1SV04J l, z26VwPW l, z1Syopf l, z2Wivic l, z24yvbW l,
z1Syopf l, z1Sykgt l, z3[yvfZ l, z1SV04J l, z2WivqZ l, z2WivyZ l, z24yvr1 l, z2Wyw01 l,
zfiw7a l, z1YFvab l, z1SQ04y l, z2WiwFa l, z20iwFZ l, z1SyiDk l, z1SQ04y l, z2Wivic l,
z2WiwFa l, z20yw9W l, z1SyqMm l, z2WiwF\ l, z20yw8W l, z1SyqMm l, z2WiwFa l, z20iwFZ l,
z1SymxE l, z1SyqMm l, z3[yvfs l, z1[ivab l, z2WiviY l, z2WiwNa l, z1SyoUZ l, z1SL05P l,
z2WiwFa l, z1SymxE l, z1SL05P l, z2WiwNa l, z1SynMW l, z2WiwFa l, z1SyiDk l, z2WdwFa l,
z20tw90 l, z1StqMm l, z2WiwFa l, z20iwFZ l, z1SyiDk l, z26FwFY l, z1SQ05O l, z2WiwFa l,
z1Syh5d l, z1SL05O l, z2WiwNa l, z20iwNZ l, z1Sykgt l, z3[yvg0 l, z2WiwFa l, z20iwFZ l,
z1SyiDk l, z2WiviY l, z26ivic l, z1SQ05] l, z2WiwFa l, z1Syh5d l, z1SL05\ l, z2WiwNa l,
z20iwNZ l, z1Sykgt l, z3[yvgV l, z24yvr1 l, zbyw01 l, z3[yvnf l, z1SV04J l, zfyw82 l,
z20iwFj l, z4iwNc l, z1YVwK0 l, z4Av7c l, z2WiwFd l, z1SV000 l, zfyw81 l, z20iwFS l,
ziwyc l, z20yw81 l, ziwqc l, z24iwyh l, z1WiwyY l, z2YiwFi l, z1SV000 l, z2Wiwid l,
zfywb1 l, z20iwiS l, ziwyg l, z20ywb1 l, ziwqg l, z2WiwVi l, z20ywO1 l, z1WiwVY l,
z26FwVh l, z1tFwZ6 l, z1SL06D l, z2Wiwad l, zfiwaX l, z20iwaT l, z20iwai l, zFwFf l,
z24ywb1 l, zFwVg l, z1SV000 l, z2Wiwic l, zfywb1 l, z20iwiS l, ziwyg l, z20ywb1 l,
ziwqg l, z26Fwyh l, z1tFwZ6 l, z1SL06V l, z2Wiwac l, zfiwaX l, z20iwaT l, z20iwah l,
ziwFf l, z20ywj1 l, z1WiwqY l, zFwqg l, z1SV000 l, z1SyoUZ l, z4AwFe l, z1SV000 l,
zfywG2 l, z20iwNj l, z20ywG2 l, z6iwVd l, z1SQ06e l, z4iwae l, z1YVw[0 l, z1tFwe6 l,
z1SV000 l, z1SypMi l, z1SL06f l, z1SV000 l, z4iwFU l, z1YVwC0 l, z4Av7U l, z1SV000 l,
z1WywBy l, z6iwVV l, z1SQ06t l, z4iwNe l, z1YVwK0 l, z1SQ06p l, z4FwFe l, z1SV000 l,

freedict



[ifndef $C_rsPtr
    hCA wconstant $C_rsPtr
]

\
\ These constants will be sent by muxserial
[ifndef _MX_BSHIFT
d_4	wconstant _MX_BSHIFT
d_16	wconstant _MX_BSIZE
d_15	wconstant _MX_BMASK
d_32	wconstant _MX_NUM_CHAN
d_128	wconstant _MX_BUF_OFFSET
]
\
\
\ 0			- _MX_NUM_CHAN * head tail
\ _MX_BUF_OFFSET	- _MX_NUM_CHAN*2 * 16 byte buffer
\ _MX_BUF_OFFSET+d_1024	- end
\
\
\
: gos
	h1DC

	lockdict here W@ _MX_BUF_OFFSET d_1024 + allot freedict
	dup _MX_BUF_OFFSET 0 fill

	2dup swap COG! swap 1+ swap
	_MX_BUF_OFFSET + over COG! 1+

	hD8 _p+ over COG! 1+
	hDA _p+ over COG! 1+
	h100 over COG! 1+
	_MX_BSHIFT over COG! 1+
	_MX_BMASK over COG! 1+
	_MX_NUM_CHAN over COG! 1+
	-1 over COG! 1+


\
\	
	1 7 sersetflags
	cogid iodis
\
\ set the cog to busy
	c" MX_SERIAL" cds W!
	4 state andnC!
	hE0 state orC!
\
\ set up channels as input to this cog
	io _MX_NUM_CHAN 4* bounds
	do
		h100 i L!
	4 +loop

	_MX_NUM_CHAN 6 min 0
	do
		cogid i i 0 (ioconn)
	loop
	_MX_NUM_CHAN 6 >
	if
		_MX_NUM_CHAN 4* io + d_6 4* io +
		do
			i dup 2+ W!
		4 +loop
	then
\
\ set up the serial io channel and connect it
	7 cogio h100 hD8 _p+ L!
	hD8 _p+ 2dup 2+ W! swap 2+ W!
\
\ send a ! then wait for a !
	h21 hDA _p+ W@ W!
\	h21 a_seremit
	begin
		hD8 _p+ C@
		h21 =
	until
	h100 hD8 _p+ W!

	a_iobuf
;



`
